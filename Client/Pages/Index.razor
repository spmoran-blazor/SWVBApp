@page "/"
@page "/{Action}"
@*@attribute [Authorize]*@
@inject DataAccessService dataAccess
@inject StateAccessService stateAccess

<Client.Components.ProjectAuthComponent />

@if (CurrentMember is not null)
{
    <Client.Components.TopAppBar Action="@Action" />
}

@if (CurrentMember is not null)
{
    switch (Action)
    {
        case null:
            <Client.Components.NavScreen />
            break;
        case "0":
            <Client.Components.Messages />
            break;
        case "1":
            <Client.Components.EventRegister />
            break;
        case "2":
            <Client.Components.Profile />
            break;
        case "3":
            <Client.Components.PreferredDays />
            break;
        case "4":
            <Client.Components.ExceptionDates />
            break;
        default:
            <Client.Components.NavScreen />
            break;
    }
}
<Client.Components.BottomAppBar />

@code {
    [Parameter]
    public string? Action { get; set; }
    private entities.Member _currentMember = new entities.Member();
    public Member? CurrentMember { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        stateAccess.OnStateChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if(CurrentMember is null)
            {
                CurrentMember = stateAccess.Member;
                StateHasChanged();
            }
        }
    }
}
