@page "/profile"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using System.Text.Json
@using entities = WVBApp.Shared.Entities
@using System.Runtime.Serialization
@using System.Runtime.Serialization.Json
@using WVBApp.Shared.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataAccessService dataAccess;

<MudTabs Elevation="0" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
    <MudTabPanel Text="Profile">
        <EditForm Model="@_currentMember" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <h5 class="mud-typography mud-typography-h5">Your Information</h5>
            <MudGrid>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.FirstName" Label="First Name" Variant="Variant.Text"></MudTextField>
                </MudItem>

            </MudGrid>
        </EditForm>
        </MudTabPanel>
        <MudTabPanel Text="Preferences">
        <MudText>Content Two</MudText>
    </MudTabPanel>
</MudTabs>
@*<EditForm Model="@_currentMember" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <h5 class="mud-typography mud-typography-h5">Your Information</h5>
    <MudGrid>
        <MudItem xs="12" sm="7" Class="pt-5">
            <MudTextField @bind-Value="@_currentMember.FirstName" Label="First Name" Variant="Variant.Text"></MudTextField>
        </MudItem>

    </MudGrid>
</EditForm>*@

    @code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private entities.Member _currentMember = new entities.Member();
    private DataAccessService? _data;
    private ClaimsPrincipal? _user;
    private int _userId;
    private string? _userEmail;

    bool success;

    private void HandleValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await GetClaimsPrincipalData();
        _data = dataAccess;
        await GetMemberByEmail();
    }

    protected override async Task OnInitializedAsync()
    {


            StateHasChanged();

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (!firstRender)
    //    {

    //    }
    //}

    private async Task GetMemberByEmail()
    {
        _currentMember = await dataAccess.GetMemberByEmail(_userEmail);

        var foo = "x";

    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User ?? null;

        if (user != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                _userEmail = user.Identity.Name;
            }
        }
    }
}

