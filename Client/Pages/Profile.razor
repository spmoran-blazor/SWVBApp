@page "/profile"
@*@attribute [Authorize]*@
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using System.Text.Json
@using System.Text
@using entities = WVBApp.Shared.Entities
@using System.Runtime.Serialization
@using System.Runtime.Serialization.Json
@using WVBApp.Shared.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataAccessService dataAccess;

<MudTabs Elevation="0" Rounded="true" Centered="true" Color="@Color.Transparent" PanelClass="pa-6">
    <MudTabPanel Text="Profile" Icon="@Icons.Material.Filled.PermIdentity">
        <EditForm Model="@_currentMember" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.FirstName" Label="First Name" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.LastName" Label="Last Name" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.Email" Label="Email" Disabled Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.MobileNumber" Label="Mobile Number" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.Gender" Label="Gender" Disabled Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.PlayLevel" Label="Level" Disabled Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudTextField @bind-Value="@_currentMember.PlayScore" Label="Player Score" Disabled Variant="Variant.Text"></MudTextField>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudTabPanel>
    <MudTabPanel Text="Preferences" Icon="@Icons.Filled.PermContactCalendar">
        <MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Filled.Today" class="mr-3"></MudIcon>
                        <MudText>Preferred Play Days</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <EditForm Model="@_currentMember" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <MudStack>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[0].DayValue" Label="Sunday" />
                            </MudItem>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[1].DayValue" Label="Monday" />
                            </MudItem>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[2].DayValue" Label="Tuesday" />
                            </MudItem>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[3].DayValue" Label="Wednesday" />
                            </MudItem>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[4].DayValue" Label="Thursday" />
                            </MudItem>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[5].DayValue" Label="Friday" />
                            </MudItem>
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@_playDays[6].DayValue" Label="Saturday" />
                            </MudItem>
                        </MudStack>
                    </EditForm>
                </ChildContent>
            </MudExpansionPanel>
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Filled.EditCalendar" class="mr-3"></MudIcon>
                        <MudText>Exception Dates</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                        <DataAnnotationsValidator />
                    @*<MudDataGrid T="entities.MemberExceptionDates" Items="@_currentMember.ExceptionDates" EditMode="@(DataGridEditMode.Form)"
                                     StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                                     Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
                            <Columns>
                                <Column T="Element" Field="BeginDate" Title="Begin Date" IsEditable="true" />
                                <Column T="Element" Field="EndDate" Title="End Date" IsEditable="true" />
                                <Column T="Element" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                                                <CellTemplate>
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                                    </CellTemplate>
                                </Column>
                            </Columns>
                        </MudDataGrid>*@
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudTabPanel>
</MudTabs>



@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private entities.Member? _currentMember = new entities.Member();
    private DataAccessService? _data;
    private ClaimsPrincipal? _user;
    private int _userId;
    private string? _userEmail;
    //private int[]? _playDays = new int[7];
    List<entities.PlayDay>? _playDays = new List<entities.PlayDay>();
    List<entities.MemberExceptionDates>? _memberExceptionDates;
    private List<string> _events = new();

    bool success;

    private void HandleValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    void StartedEditingItem(entities.MemberExceptionDates item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(entities.MemberExceptionDates item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(entities.MemberExceptionDates item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        ////await GetClaimsPrincipalData();
        _data = dataAccess ?? null;
        await GetMemberByEmail();
        await GetMemberExceptionDatesById(_currentMember.Id);
        await SetPlayDays();
        StateHasChanged();
        await SavePlayDates();

    }

    protected async Task SetPlayDays()
    {
        await Task.Run(async () =>
        {
            char[]? splittedList = _currentMember?.PreferredDays?.ToCharArray() ?? null;
            string playdays = new string(splittedList);
            foreach (char i in splittedList)
            {
                entities.PlayDay day = new entities.PlayDay();
                day.DayNumber = i.ToString();
                day.DayValue = (i.ToString() == "1") ? true : false;

                _playDays.Add(day);
            }
        });
    }

    protected async Task SavePlayDates()
    {
        await Task.Run(async () =>
        {
            //StringBuilder sb = new StringBuilder();

            //foreach (var pd in _playDays)
            //{
            //    sb.Append(pd.DayNumber);
            //}

            //_currentMember.PreferredDays = sb.ToString();
        });
    }


    protected override async Task OnInitializedAsync()
    {


        //StateHasChanged();

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (!firstRender)
    //    {

    //    }
    //}

    private async Task GetMemberByEmail()
    {
        //_currentMember = await dataAccess.GetMemberByEmail(_userEmail);
        _currentMember = await _data.GetMemberByEmail("spmoran@hotmail.com");
    }

    private async Task GetMemberExceptionDatesById(int Id)
    {
        var getData = await _data.GetMemberExceptionDates(Id);
        _memberExceptionDates = getData.ToList<entities.MemberExceptionDates>();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User ?? null;

        if (user != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                _userEmail = user.Identity.Name;
            }
        }
    }
}

