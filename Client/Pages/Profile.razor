@page "/profile"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using System.Text.Json
@using System.Text
@using entities = WVBApp.Shared.Entities
@using System.Runtime.Serialization
@using System.Runtime.Serialization.Json
@using WVBApp.Shared.Data

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataAccessService dataAccess;
@inject IDialogService DialogService;

@if (_currentMember is not null && _memberExceptionDates is not null)
{
    <MudAppBar Color="Color.Primary" Fixed="true" Elevation="0">

        <MudText Typo="Typo.h5">Player Center</MudText>

    </MudAppBar>

    <MudExpansionPanels MultiExpansion="false" Square="true" DisableBorders="false" Elevation="1" Class="pt-8">

        <MudExpansionPanel HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>Exception Dates</strong></MudText>
                    <MudIcon Icon="@Icons.Filled.EditCalendar" class="ml-auto" Color="Color.Primary" Size="Size.Large"></MudIcon>

                </div>
            </TitleContent>
            <ChildContent>
                <MudTable Items="@_memberExceptionDates" Elevation="0" Hover="false" Border="false" Breakpoint="Breakpoint.Sm" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc">
                    <HeaderContent>
                        <MudTh>Begin Date</MudTh>
                        <MudTh>End Date</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="BeginDate">@context.BeginDate.ToShortDateString()</MudTd>
                        <MudTd DataLabel="End Date">@context.EndDate.ToShortDateString()</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Large" OnClick="@((e) => DeleteExceptionDate(@context.Id))">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>

                </MudTable>

                <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
                    <TitleContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Edit Dates <text></text>
                        </MudText>
                    </TitleContent>
                    <DialogContent>
                        <MudDateRangePicker></MudDateRangePicker>
                    </DialogContent>
                    <DialogActions>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Submit" Class="px-10">Close</MudButton>
                    </DialogActions>
                </MudDialog>
                @*                    <RemoveExceptionDate exceptionDates=@_memberExceptionDates>Foof</RemoveExceptionDate>*@
            </ChildContent>
        </MudExpansionPanel>

        <MudExpansionPanel HideIcon="true" Text="Preferred Play Days" Style="font-weight:bold" Size="Size.Large">
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>Preferred Play Days</strong></MudText>
                    <MudIcon Icon="@Icons.Filled.Today" class="ml-auto" Color="Color.Primary" Size="Size.Large"></MudIcon>

                </div>
            </TitleContent>
            <ChildContent>
                <EditForm Model="@_playDays" OnValidSubmit="HandleValidPlayDaySubmit">
                    <DataAnnotationsValidator />
                    <MudStack>
                        @foreach(var playday in _playDays)
                        {
                            <MudItem xs="12" sm="7" Class="pt-5">
                                <MudCheckBox @bind-Checked="@playday.DayOfWeek" Label="@playday.Day" />
                            </MudItem>
                        }
                    </MudStack>
                </EditForm>
                <MudPaper Height="200px" Width="100%" Elevation="0">
                    <MudContainer MaxWidth="MaxWidth.Small">
                        <MudPaper Height="200px" Width="100%" Square="true" Style="background-color:transparent" Elevation="0"></MudPaper>
                    </MudContainer>
                </MudPaper>
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel HideIcon="true" Text="Member Data" Icon="@Icons.Filled.Person" Style="font-weight:bold">
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>Member Data</strong></MudText>
                    <MudIcon Icon="@Icons.Filled.Person" class="ml-auto" Color="Color.Primary" Size="Size.Large" Style="font-weight:bold"></MudIcon>

                </div>
            </TitleContent>
            <ChildContent>


                <EditForm Model="@_currentMember" OnValidSubmit="HandleValidMemberSubmit">
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.FirstName" Label="First Name" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.LastName" Label="Last Name" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.Email" Label="Email" Disabled Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.MobileNumber" Label="Mobile Number" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.Gender" Label="Gender" Disabled Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.PlayLevel" Label="Level" Disabled Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.PlayScore" Label="Player Score" Disabled Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="7" Class="pt-5">
                            <MudTextField @bind-Value="@_currentMember.IsAdmin" Label="Admin User" Disabled Variant="Variant.Text"></MudTextField>
                        </MudItem>
                    </MudGrid>
                </EditForm>
                <MudPaper Height="200px" Width="100%" Elevation="0">
                    <MudContainer MaxWidth="MaxWidth.Small">
                        <MudPaper Height="200px" Width="100%" Square="true" Style="background-color:transparent" Elevation="0"></MudPaper>
                    </MudContainer>
                </MudPaper>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>


}


@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private entities.Member? _currentMember = new entities.Member();
    private DataAccessService? _data;
    //private ClaimsPrincipal? _user;
    private int _userId;
    //private string? _userEmail;
    List<entities.PlayDay>? _playDays = new List<entities.PlayDay>();
    List<entities.MemberExceptionDates>? _memberExceptionDates;
    //private List<string> _events = new();
    private MudTable<entities.MemberExceptionDates> mudTable;
    private int selectedRowNumber = -1;
    bool success;
    private bool visible;
    private int rating;
    private void OpenDialog() => visible = true;
    void Submit() => visible = false;

    private DialogOptions dialogOptions = new() { FullWidth = true };

    async Task DeleteExceptionDate(int exceptionDate)
    {
        var parameters = new DialogParameters { ["dateId"] = exceptionDate };
        //this.OpenDialog();

        //var dialog = DialogService.Show<RemoveExceptionDate>("Delete Server", parameters);
        //var result = await dialog.Result;

        ////if (!result.Cancelled)
        ////{
        ////    //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
        ////    Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
        ////    //Servers.RemoveAll(item => item.Id == deletedServer);
        ////}
    }

    private void RowClickEvent(TableRowClickEventArgs<entities.MemberExceptionDates> tableRowClickEventArgs)
    {
        Console.Write("Row has been clicked");
    }

    private string SelectedRowClassFunc(entities.MemberExceptionDates element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            //clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            //clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private void HandleValidMemberSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    private void HandleValidPlayDaySubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    private void HandleValidExceptionDatesSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        //await GetClaimsPrincipalData();

        //await SavePlayDates();
    }

    protected async Task SetPlayDays(int Id)
    {
        var getData = await _data.GetMemberPreferredDaysById(Id);
        _playDays = getData.ToList() ?? null;
    }

    protected override async Task OnInitializedAsync()
    {
        var uid = localStorage.GetItemAsync<string>("userId");
        _userId = Convert.ToInt32(uid);
        _data = dataAccess ?? null;
        GetMemberById(_userId);
        GetMemberExceptionDatesById(_userId);
        SetPlayDays(_userId);
        //StateHasChanged();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            //_data = dataAccess ?? null;
            //GetMemberByEmail();


        }
        else
        {

        }
    }

    private async Task GetMemberById(int Id)
    {
        _currentMember = await _data.GetMemberById(Id);
    }

    private async Task GetMemberExceptionDatesById(int Id)
    {
        var getData = await _data.GetMemberExceptionDates(Id);

        _memberExceptionDates = getData.ToList<entities.MemberExceptionDates>();
    }

}

