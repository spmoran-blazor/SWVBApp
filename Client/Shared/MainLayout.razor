@inherits LayoutComponentBase
@using WVBApp.Shared.Data
@using entities = WVBApp.Shared.Entities
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-3 pr-0 pl-0">
            <AuthorizeView>
                <Authorizing>
                </Authorizing>
                <Authorized>
                    <div class="content px-4">
                        @Body
                    </div>
                </Authorized>
                <NotAuthorized>
                    <RedirectToLogin></RedirectToLogin>
                </NotAuthorized>
            </AuthorizeView>

        </MudContainer>
    </MudMainContent>
    <MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
        <MudMenu Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" Size="Size.Large" >
        <MudMenuItem Href="/AddEvent" Match="NavLinkMatch.Prefix" Icon="@Icons.Filled.EditCalendar">Manage Games</MudMenuItem>
        </MudMenu>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.Message" Color="Color.Inherit" Edge="Edge.End" Href="/" Size="Size.Large" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.EditCalendar" Color="Color.Inherit" Edge="Edge.End" Href="/eventregister" Size="Size.Large" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.PermIdentity" Color="Color.Inherit" Edge="Edge.End" Href="/profile" Size="Size.Large" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" Href="/.auth/logout" Size="Size.Large" />
    </MudAppBar>
</MudLayout>

@code {
    private DataAccessService? _data;
    private entities.Member _currentMember = new entities.Member();
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    //protected override void OnInitialized()
    //{
    //    GetClaimsPrincipalData();
    //    _data = dataAccess ?? null;
    //    GetMemberByEmail();
    //    _isLoaded = true;
    //}

    //private async Task GetMemberByEmail()
    //{
    //    _currentMember = await dataAccess.GetMemberByEmail(_userEmail);

    //    await localStorage.SetItemAsync("userName", $"{_currentMember.FirstName} {_currentMember.LastName}");
    //    await localStorage.SetItemAsync("email", _currentMember.Email);
    //    await localStorage.SetItemAsync("userId", _currentMember.Id.ToString());

    //    var _userName = await localStorage.GetItemAsync<string>("userName");
    //    var _userEmal = await localStorage.GetItemAsync<string>("email");
    //    var _userId = await localStorage.GetItemAsync<string>("userId");


    //}
}