@inject DataAccessService data
@inject IDialogService DialogService
@inject StateAccessService state
@inject ISnackbar Snackbar
@implements IDisposable;

@if (success == true)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <EditForm Model="@_dateRange" OnValidSubmit="HandleValidExceptionDatesSubmit">
            <DataAnnotationsValidator />
            <MudExpansionPanels DisableBorders="true" Elevation="0" Class="pt-10">
                <MudExpansionPanel @bind-IsExpanded="_isOpen" HideIcon="true" Style="py-0" >
                    <TitleContent>
                        <div class="d-flex">
                            <MudChip Size="Size.Large" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="d-flex ml-auto">Add Dates</MudChip>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudDateRangePicker @ref="_picker" Label="Add Date Range" @bind-DateRange="_dateRange" Elevation="0" AutoClose="true" PickerVariant="PickerVariant.Dialog" For="@(() => _dateRange.Start)" />
                        <MudItem xs="12" sm="7" Class="pt-6 align-end">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
                        </MudItem>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </EditForm>
    </MudContainer>
}


@if (_memberExceptionDates is not null && success == true && _memberExceptionDates.Count > 0)
{
    <MudPaper Width="100%" Elevation="0" Class="pt-6">
        <MudContainer MaxWidth="MaxWidth.Small" Class="pt-6">
            <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                @foreach (var ed in @_memberExceptionDates)
                {
                    <MudItem xs="9">
                        <MudPaper Typo="Typo.body2" Class="d-flex align-center justify-left mud-width-full py-2 pl-3" Width="100%" Elevation="0">
                            <MudText Class="d-flex align-center justify-start py-1">@ed.BeginDate.ToShortDateString() -  @ed.EndDate.ToShortDateString()</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="3">
                        <MudPaper Class="d-flex align-center py-2" Elevation="0" Width="80px">
                            <MudIconButton Class="d-flex align-center justify-end py-1" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" @onclick="(e => DropExceptionDate(ed))" />
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudPaper>
}


<MudPaper Height="200px" Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Height="200px" Width="100%" Square="true" Style="background-color:transparent" Elevation="0"></MudPaper>
    </MudContainer>
</MudPaper>

@code {
    private StateAccessService? _state;
    private DataAccessService? _data;
    private bool success = false;
    private int selectedRowNumber = -1;
    private entities.Member? _currentMember;
    private MudDateRangePicker? _picker;
    private DateRange _dateRange = new DateRange();
    private bool _success;
    bool _isOpen = false;
    List<entities.MemberExceptionDate>? _memberExceptionDates = new List<MemberExceptionDate>();

    protected override async Task OnInitializedAsync()
    {
        _state = state;
        _currentMember = _state.Member;
        _data = data ?? null;
        await GetMemberExceptionDatesById();
    }

    //private DialogOptions dialogOptions = new() { FullWidth = true };

    private async Task GetMemberExceptionDatesById()
    {
        if (_currentMember is not null)
        {
            var getData = await _data.GetMemberExceptionDatesById(_currentMember.Id);
            _memberExceptionDates = getData.OrderBy(x => x.BeginDate).ToList<entities.MemberExceptionDate>();
            success = true;
        }
    }

    private async Task HandleValidExceptionDatesSubmit(EditContext context)
    {
        MemberExceptionDate ed = new MemberExceptionDate();
        ed.BeginDate = Convert.ToDateTime(_dateRange.Start);
        ed.EndDate = Convert.ToDateTime(_dateRange.End);
        ed.MemberId = _state.Member.Id;
        ed.UpdatedBy = _state.Member.Email;
        ed.UpdatedDate = DateTime.Now;

        var getData = await _data.SaveExceptionDate(ed);

        success = true;
        await GetMemberExceptionDatesById();
        _dateRange = new DateRange();
        Snackbar.Configuration.PositionClass = "Top-Center";
        Snackbar.Add("Date Saved!", Severity.Success);
        StateHasChanged();
    }

    private async void DropExceptionDate(MemberExceptionDate date)
    {
        var postData = await _data.RemoveExceptionDate(date);
        await GetMemberExceptionDatesById();
        success = true;
        Snackbar.Configuration.PositionClass = "Top-Center";
        Snackbar.Add("Date Removed!", Severity.Success);
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _state = null;
        _currentMember = null;
        _data = null;
    }
}
