@attribute [Authorize]
@inject DataAccessService data
@inject StateAccessService state
@inject ISnackbar Snackbar
@implements IDisposable;

<MudExpansionPanels MultiExpansion="true" Square="true" DisableBorders="false" Elevation="1" Class="pt-8" >
    @foreach(var evt in _availableEvents)
    {
        var ed = @evt.EventDate ?? null;
        var nd = ed.Value;
        string sd = nd.ToShortDateString();


        var x = new DateTime().Add(evt.EventTime.GetValueOrDefault()).ToShortTimeString();

        string dw = nd.DayOfWeek.ToString();

        string title = dw + " " + sd + " " + x;



        <MudExpansionPanel Text="@title" Icon="@Icons.Material.Filled.SportsVolleyball" Color="Color.Primary" style="color:red">

            </MudExpansionPanel>
    }
</MudExpansionPanels>



@code {
    private StateAccessService? _state;
    private DataAccessService? _data;
    private entities.Member? _currentMember;
    private bool _success = false;
    List<PreferredPlayDays> _preferredDaysDisplay = new List<PreferredPlayDays>();
    List<Event> _availableEvents = new List<Event>();

    protected override async Task OnInitializedAsync()
    {
        _state = state;
        _currentMember = _state.Member;
        _data = data ?? null;
        await GetAvailableGames();
    }
    protected async Task GetAvailableGames()
    {
        var getData = await _data.GetAvailableGamesByMemberId(_currentMember.Id);
        _availableEvents = getData.ToList() ?? null;
    }
    //public bool SwitchValue { get; set; } = true;
    //public bool ReadOnly { get; set; } = true;

    //void ToggleValue()
    //{
    //    SwitchValue = !SwitchValue;
    //}
    void IDisposable.Dispose() { }
    
}   