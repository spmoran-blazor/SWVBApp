@using WVBApp.Shared.Entities
@using WVBApp.Shared.Services.Data
@using WVBApp.Shared.Services.State
@using System.Security.Claims
@using System.Text.Json
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject DataAccessService dataAccess
@inject StateAccessService stateAccess

@code {
    [Parameter]
    public Member? CurrentMember { get; set; }
    public DataAccessService? _data;
    public StateAccessService? _state;
    public Member? _currentMember;
    public ClaimsPrincipal? _user;
    public string? _userId;
    public string? _userEmail;
    public string? _userName;
    public string? _userJson;
    public bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {   
        _state = stateAccess;
        _state.OnStateChange += StateHasChanged;
        _data = dataAccess;

        await GetClaimsPrincipalData();
        await GetMemberByEmail();
        _state.SetMemberValue(_currentMember);
    }
    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identities.Count() == 0)
        {
            return;
        }
        var user = authState.User ?? null;

        if (user is not null && user.Identity is not null)
        {
            if (user.Identity.IsAuthenticated)
            {
                _userEmail = user.Identity.Name;
            }
        }
    }

    private async Task GetMemberByEmail()
    {
        if (_userEmail is null || _userEmail == string.Empty)
        {
            return;
        }

        if (_data is not null && _userEmail is not null)
        {
            _currentMember = await _data.GetMemberByEmail(_userEmail);
            if(_currentMember is not null)
            {
                _userId = _currentMember.Id.ToString();
            }
        }

        if (_currentMember is not null)
        {
           _userName = $"{_currentMember.FirstName} {_currentMember.LastName}";
            await sessionStorage.SetItemAsync("email", _currentMember.Email);
            await sessionStorage.SetItemAsync("userId", _currentMember.Id.ToString());
            await sessionStorage.SetItemAsync("currentUser", _userJson);
            await sessionStorage.SetItemAsync("userName", _userName);
        }
    }
}
