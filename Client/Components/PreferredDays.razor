@attribute [Authorize]
@inject DataAccessService data
@inject StateAccessService state
@implements IDisposable;

@if (_preferredDaysDisplay.Count > 0)
{

    <MudPaper Height="400px" Width="100%" Elevation="0">
        <MudContainer MaxWidth="MaxWidth.Small">
            <EditForm Model="@_preferredDaysDisplay" OnValidSubmit="HandleValidPlayDaySubmit">
                <DataAnnotationsValidator />
                <MudStack Class="pt-10 pl-10">
                    @foreach (var prefday in _preferredDaysDisplay)
                    {
                        <MudItem xs="12" sm="7">
@*                            <MudSwitch @bind-Checked="ThumbIcon="@(_checked3==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(_checked3==true ? Color.Success : Color.Error)">Changing</MudSwitch>" Label="@prefday.Day" Color="Color.Primary" UnCheckedColor="Color.Secondary" />*@
@*                            <MudSwitch @bind-Checked="prefday.IsPreferred" ThumbIcon="@(prefday.IsPreferred==true ? Icons.Material.Filled.Done : Icons.Material.Outlined.Close)" ThumbIconColor="Color.Inherit" Label="@prefday.Day" Color="Color.Primary" UnCheckedColor="Color.Secondary"  />*@
                            <MudSwitch Color="Color.Primary" UnCheckedColor="Color.Secondary" @bind-Checked="prefday.IsPreferred" Label="@prefday.Day" />

                        </MudItem>
                    }
                    <MudItem xs="12" sm="7" Class="pt-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
                        @if (@_success)
                        {
                            <MudChip class="pl-5 ml-5" Color="Color.Success">Success</MudChip>
                        }
                    </MudItem>
                </MudStack>
            </EditForm>
        </MudContainer>
    </MudPaper>
 

}
<MudPaper Height="200px" Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Height="200px" Width="100%" Square="true" Style="background-color:transparent" Elevation="0"></MudPaper>
    </MudContainer>
</MudPaper>

@code {
    private StateAccessService? _state;
    private DataAccessService? _data;
    private entities.Member? _currentMember;
    private bool _success = false;
    List<PreferredPlayDays> _preferredDaysDisplay = new List<PreferredPlayDays>();
    List<MemberPreferredDays> _currentPlayDays = new List<MemberPreferredDays>();

    protected override async Task OnInitializedAsync()
    {
        _state = state;
        _currentMember = _state.Member;
        _data = data ?? null;
        await GetCurrentPlayDays();
        await ShowPlayDays();
    }

    private async Task HandleValidPlayDaySubmit(EditContext context)
    {
        WVBApp.Shared.DTOs.PreferredDaysPackage preferredDaysPackage = new PreferredDaysPackage();
        preferredDaysPackage.DeleteDays = _currentPlayDays;

        List<MemberPreferredDays> mpds = new List<MemberPreferredDays>();
        @foreach (var prefday in _preferredDaysDisplay)
        {
            if (prefday.IsPreferred == true)
            {
                MemberPreferredDays mpd = new MemberPreferredDays();
                mpd.UpdatedBy = _state.Member.Email;
                mpd.DayOfWeekId = prefday.DayOfWeekId;
                mpd.MemberId = prefday.MemberId;
                mpd.Id = prefday.Id;

                mpds.Add(mpd);
            }
        }

        preferredDaysPackage.AddDays = mpds;
        //_currentMember.UpdatedBy = _currentMember.Email;
        _currentPlayDays = await _data.SavePreferredDays(preferredDaysPackage);
        _success = true;
        StateHasChanged();

    }

    private async Task ClearSuccess()
    {
        _success = false;
        StateHasChanged();
    }

    protected async Task GetCurrentPlayDays()
    {
        var getData = await _data.GetMemberPreferredDaysById(_currentMember.Id);
        _currentPlayDays = getData.ToList() ?? null;
    }

    protected async Task ShowPlayDays()
    {
        if (_currentMember is not null)
        {
            List<int> vals = new List<int>();

            if (_currentPlayDays is not null)
            {
                foreach (var mpd in _currentPlayDays)
                {
                    vals.Add(mpd.DayOfWeekId);
                }
            }

            //if (vals.Count > 0)
            //{
                DateTime baseDate = new DateTime(0001, 01, 02).AddDays(362);
                for (int i = 0; i < 7; i++)
                {
                    PreferredPlayDays ppd = new PreferredPlayDays()
                        {
                            MemberId = _currentMember.Id,
                            DayOfWeekId = i,
                            IsPreferred = false,
                            Day = baseDate.AddDays(i).DayOfWeek.ToString(),
                        };

                    if (vals.Contains(ppd.DayOfWeekId))
                    {
                        ppd.IsPreferred = true;
                    }
                    _preferredDaysDisplay.Add(ppd);
                }

            //}
        }

    }
    void IDisposable.Dispose()
    {
        _data = null;
        _state = null;
        _currentMember = null;
    }

}
