@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using WVBApp.Shared.Services.Data
@using WVBApp.Shared.Entities
@using WVBApp.Shared.Services.State

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataAccessService dataAccess;
@inject StateAccessService stateAccess
@inject IDialogService DialogService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (_codes is not null)
{
    <MudSelect T="EventSchedulingCode" @ref="@_mudSelect" AnchorOrigin="Origin.BottomCenter" Label="Select Game Type" Clearable="true" Required="true" SelectedValuesChanged="OnSelectedCodeValuesChanged" Class="pt-8 pb-3">
        @foreach (var evt in _codes)
        {
            <MudSelectItem Value="@(evt)">@evt.Code - @evt.Description - @evt.Notes</MudSelectItem>
        }
    </MudSelect>
}

@if (_selectedCode is not null)
{
    <EditForm @ref="form" Model="@_newEvent" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
        <DataAnnotationsValidator />
        <MudGrid Class="overflow-scroll">
            <MudItem xs="12" sm="7" Class="pt-5">
                <MudDatePicker @ref="@_picker" Label="Event Date" PickerVariant="PickerVariant.Dialog" @bind-Date="@_newEvent.EventDate" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Enter Event Date" AutoClose="false" For="@(() => @_newEvent.EventDate)">
                    <PickerActions Context="dateContext">
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDatePicker>
            </MudItem>
            <MudItem xs="12" sm="7">
                <MudTimePicker Label="Event Time" AmPm="true" @bind-Time="_eventTime" PickerVariant="PickerVariant.Dialog" />
            </MudItem>
            <MudItem xs="12" sm="7">
                <MudField Label="Area of Play" Variant="Variant.Text" InnerPadding="true">
                    <MudRadioGroup @bind-SelectedOption="@_newEvent.AreaOfPlayId" Class="pl-4">
                        <MudRadio Option="1" Color="Color.Primary" Size="Size.Small" Dense>North End</MudRadio>
                        <MudRadio Option="2" Color="Color.Secondary" Size="Size.Small" Dense>South End</MudRadio>
                    </MudRadioGroup>
                </MudField>
            </MudItem>

            <MudItem xs="12" sm="7" Class="pt-5">
                <MudNumericField @bind-Value="@_selectedCode.MinLevelMain" Label="Min Player Level" Variant="Variant.Text" Min="1" ReadOnly="true" />
            </MudItem>
            <MudItem xs="12" sm="7" Class="pt-5">
                <MudNumericField @bind-Value="@_selectedCode.MaxLevelMain" Label="Max Player Level" Variant="Variant.Text" Min="1" ReadOnly="true" />
            </MudItem>

            <MudItem xs="12" sm="7" Class="pt-5">
                <MudNumericField @bind-Value="@_newEvent.ParticipantLimit" Label="Number of Players Needed" Variant="Variant.Text" Min="0" Max="10" />
            </MudItem>

            <MudItem xs="12" sm="7" Class="pt-5">
                <MudField Label="Partial Game" Variant="Variant.Text">
                    <MudCheckBox @bind-Checked="@_newEvent.IsPartial" Label="Is Partial Game" Size="Size.Small" Disabled></MudCheckBox>
                </MudField>
            </MudItem>
            <MudHidden>@_newEvent.EventSchedulingCodeId</MudHidden>
            <MudHidden>@_newEvent.UpdatedBy</MudHidden>

            <MudItem xs="12" sm="7" Class="pt-5" Style="border:none;">
                <MudField Label="Comments" Variant="Variant.Text" InnerPadding="false">
                    <MudTextField @bind-Value="@_newEvent.EventComment" Label="Enter any Comments" Variant="Variant.Text" Margin="Margin.Dense" ></MudTextField>
                </MudField>
            </MudItem>

            <MudItem xs="12" sm="7" Class="pt-5 pb-5">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save Game</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Height="100px" Width="100%" Square="true"></MudPaper>
    </MudContainer>
}
@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private DataAccessService? _data;
    private List<EventSchedulingCode>? _codes;
    private EventSchedulingCode? _selectedCode;
    private MudSelect<EventSchedulingCode>? _mudSelect;
    private Event _newEvent = new Event();
    private DateTime? _eventDate = DateTime.Now;
    private TimeSpan? _eventTime = new TimeSpan(18, 30, 00);
    private StateAccessService _state;
    bool success;
    string[] errors = { };

    EditForm? form;
    MudDatePicker? _picker;

    //private void BuildEventForSubmission()
    //{
    //    if (_selectedCode is not null)
    //    {
    //        _newEvent.EventSchedulingCodeId = _selectedCode.Id;
    //    }

    //    if (_eventDate is not null)
    //    {
    //        _newEvent.EventDate = _eventDate;
    //    }

    //    if (_eventTime is not null)
    //    {
    //        _newEvent.EventTime = _eventTime.ToString();
    //    }

    //    if (_areaOfPlayId > 0)
    //    {
    //        _newEvent.AreaOfPlayId = _areaOfPlayId;
    //    }

    //    _newEvent.IsPartial = _isPartial;

    //    _newEvent.IsCancelled = _isCancelled;

    //    _newEvent.ParticipantLimit = _participantLimit;

    //    _newEvent.EventComment = _eventComment;

    //    //_newEvent.UpdatedDate = DateTime.Now;

    //    //_newEvent.UpdatedBy = _userEmail;
    //    _newEvent.UpdatedBy = "spmoran@hotmail.com";


    //}

    private void OnValidSubmit(EditContext context)
    {
        string s = JsonSerializer.Serialize<Event>((Event)context.Model);
        Console.WriteLine(s);
    }

    private void OnInvalidSubmit(EditContext context)
    {
       
    }

    protected override async Task OnInitializedAsync()
    {
        _state = stateAccess;
        if(_state is not null)
        {
            if(_state.Member is not null)
            {
                _newEvent.UpdatedBy = _state.Member.Email;
            }
        }

        _data = dataAccess ?? null;
        await GetEventSchedulingCodes();
        _newEvent.EventTime = _eventTime.ToString();
        _newEvent.IsPartial = false;
        _newEvent.EventDate = DateTime.Now;
    }

    private async Task GetEventSchedulingCodes()
    {
        if(_data is not null)
        {
            var data = await _data.GetEventSchedulingCodes();
            _codes = data.ToList<EventSchedulingCode>();
        }

    }

    private async Task OnSelectedCodeValuesChanged()
    {
        try
        {
            _selectedCode = _mudSelect.SelectedValues.FirstOrDefault();
            _newEvent.EventSchedulingCodeId = _selectedCode.Id;
        }
        catch (Exception e) { }

        //var data = await _data.GetEventSchedulingCodes();
        //_value =
    }
}