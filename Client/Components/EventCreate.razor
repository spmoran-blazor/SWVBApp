@attribute [Authorize]
@inject DataAccessService data
@inject StateAccessService state
@inject ISnackbar Snackbar
@implements IDisposable;


<MudContainer MaxWidth="MaxWidth.Small">
    @if (_codes is not null)
    {
        <MudSelect T="EventSchedulingCode" @ref="@_mudSelect" AnchorOrigin="Origin.BottomCenter" Label="Select Game Type" Clearable="true" Required="true" SelectedValuesChanged="OnSelectedCodeValuesChanged" Class="pt-2 pb-3">
            @foreach (var evt in _codes)
            {
                <MudSelectItem Value="@(evt)">@evt.Code - @evt.Description - @evt.Notes</MudSelectItem>
            }
        </MudSelect>
    }

    @if (_selectedCode is not null)
    {
        <MudDatePicker @ref="@_picker" @bind-Date="_eventDate" Label="Event Date" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" AutoClose="true" DisableToolbar="true">
        </MudDatePicker>
        <EditForm @ref="form" Model="@_newEvent" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
            <MudItem xs="12" sm="7" Class="pt-5">
            </MudItem>

            <MudGrid Class="overflow-scroll">
                <MudItem xs="12" sm="7">
                    <MudTimePicker Label="Event Time" AmPm="true" @bind-Time="_eventTime" PickerVariant="PickerVariant.Dialog" />
                </MudItem>

                <MudItem xs="12" sm="7">
                    <MudField Label="Area of Play" Variant="Variant.Text" InnerPadding="true">
                        <MudRadioGroup T="int" @bind-SelectedOption="@_areaOfPlayId" Class="pl-4" For="@(() => @_areaOfPlayId)">
                            <MudRadio Option="5" Color="Color.Primary" Size="Size.Small" Dense>North-All</MudRadio>
                            <MudRadio Option="6" Color="Color.Secondary" Size="Size.Small" Dense>South-All</MudRadio>
                        </MudRadioGroup>
                    </MudField>
                </MudItem>

                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudNumericField @bind-Value="@_participantLimit" Label="Number of Players Needed" Variant="Variant.Text" Min="0" Max="10" />
                </MudItem>

                <MudItem xs="12" sm="7" Class="pt-5" Style="border:none;">
                    <MudField Label="Comments" Variant="Variant.Text" InnerPadding="false">
                        <MudTextField @bind-Value="@_eventComment" Label="Enter any Comments" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                    </MudField>
                </MudItem>
                <MudItem xs="12" sm="7" Class="pt-5 pb-5">
                    <MudButton StartIcon="@Icons.Material.Outlined.Save" Variant="Variant.Outlined" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
                </MudItem>

                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudNumericField @bind-Value="@_selectedCode.MinLevelEdge" Label="Min Player Level" Variant="Variant.Text" Min="1" ReadOnly="true" />
                </MudItem>

                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudNumericField @bind-Value="@_selectedCode.MaxLevelEdge" Label="Max Player Level" Variant="Variant.Text" Min="1" ReadOnly="true" />
                </MudItem>

                <MudItem xs="12" sm="7" Class="pt-5">
                    <MudField Label="Partial Game" Variant="Variant.Text">
                        <MudCheckBox @bind-Checked="@_isPartial" Label="Is Partial Game" Size="Size.Small" Disabled></MudCheckBox>
                    </MudField>
                </MudItem>

            </MudGrid>
        </EditForm>
        <MudPaper Height="200px" Width="100%" Elevation="0">
            <MudPaper Height="200px" Width="100%" Square="true" Style="background-color:transparent" Elevation="0"></MudPaper>
        </MudPaper>
    }
</MudContainer>


@code {
    public EventWithCodeInfo? _eventInfo;
    private DataAccessService? _data;
    private List<EventSchedulingCode>? _codes;
    private EventSchedulingCode? _selectedCode;
    public MudSelect<EventSchedulingCode>? _mudSelect;
    private Event? _newEvent = new Event();
    private DateTime? _eventDate;
    private TimeSpan? _eventTime = new TimeSpan(18, 30, 00);
    private int _participantLimit;
    private bool _isPartial = false;
    private bool _isCancelled = false;
    private bool _valid = false;
    private int _areaOfPlayId = -1;
    private string? _eventComment;

    private StateAccessService? _state;
    bool _success;
    string[] errors = { };

    EditForm? form;
    MudDatePicker? _picker;

    private async Task BuildEventForSubmission()
    {
        await Task.Delay(1);
        if (_selectedCode is not null)
        {
            _newEvent.EventSchedulingCodeId = _selectedCode.Id;
        }
        else
        {
            _valid = false;
            return;
        }

        if (_eventDate is not null)
        {
            _newEvent.EventDate = _eventDate;
        }
        else
        {
            _valid = false;
            return;
        }

        if (_eventTime is not null)
        {
            _newEvent.EventTime = _eventTime;
        }
        else
        {
            _valid = false;
            return;
        }

        if (_areaOfPlayId == 5 || _areaOfPlayId == 6)
        {
            _newEvent.AreaOfPlayId = _areaOfPlayId;
        }
        else
        {
            _valid = false;
            return;
        }

        if (_participantLimit > 0)
        {
            _newEvent.ParticipantLimit = _participantLimit;
        }
        else
        {
            _valid = false;
            return;
        }


        _newEvent.IsPartial = _isPartial;
        _newEvent.IsCancelled = _isCancelled;
        _newEvent.EventComment = _eventComment;
        _newEvent.UpdatedDate = DateTime.Now;
        _newEvent.UpdatedBy = _state.Member.Email;

        _valid = true;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await BuildEventForSubmission();

        if (_valid != true)
        {
            Snackbar.Configuration.PositionClass = "Top-Center";
            Snackbar.Add("Save failed. All fields except Comments are required.", Severity.Error);
            StateHasChanged();
            return;
        }

        var temp = await _data.SaveEvent(_newEvent);
        if (temp is null)
        {
            _success = false;
            Snackbar.Configuration.PositionClass = "Top-Center";
            Snackbar.Add("Save Failed! Ensure there isn't already an event with the same date, time and area of play", Severity.Error);
            return;
        }

        _newEvent = temp;
        _newEvent.Id = 0;
        _success = true;
        Snackbar.Configuration.PositionClass = "Top-Center";
        Snackbar.Add("Event Saved!", Severity.Success);

        _state.SetEventWithCodeInfo(null);
        StateHasChanged();
    }



    private void OnInvalidSubmit(EditContext context)
    {

    }

    protected override async Task OnInitializedAsync()
    {
        state.OnStateChange += StateHasChanged;
        _state = state;
        _data = data ?? null;
        await GetEventSchedulingCodes();
    }

    private async Task GetEventSchedulingCodes()
    {
        if (_data is not null)
        {
            var data = await _data.GetEventSchedulingCodes();
            _codes = data.ToList<EventSchedulingCode>();
        }

    }

    private async Task OnSelectedCodeValuesChanged()
    {
        await Task.Delay(1);
        try
        {
            _selectedCode = _mudSelect.SelectedValues.FirstOrDefault();
            _newEvent.EventSchedulingCodeId = _selectedCode.Id;
            if (_state is not null)
            {
                if (_state.EventWithCodeInfo is not null)
                {
                    _eventDate = _state.EventWithCodeInfo.EventDate;
                }
            }
            StateHasChanged();
        }
        catch (Exception e) { }
    }

    void IDisposable.Dispose()
    {
        _data = null;
        _codes = null;
        _selectedCode = null;
        _mudSelect = null;
        _state = null;
        _newEvent = null;
    }
}