@attribute [Authorize]
@inject StateAccessService state
@implements IDisposable;

@if (_state is not null)
{
    if (_state.Member is not null)
    {
        <MudAppBar Bottom="true" Fixed="true" Elevation="2" Dense="true" Style="@_style">

            <MudChip Icon="@Icons.Filled.Person"> @_state.Member.FirstName  @_state.Member.LastName</MudChip>
            <MudSpacer />
            <MudChip Variant="Variant.Outlined" Size="Size.Medium" Icon="@Icons.Material.Outlined.Logout" Href="/.auth/logout" Color="Color.Primary">Logout</MudChip>
        </MudAppBar>
    }
}

@*<MudAppBar Fixed="true" Elevation="2" style="@_style" Dense="true">
    <MudText Typo="Typo.h6" Color="Color.Primary">@_centerText</MudText>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Filled.Home" Size="Size.Medium" Color="Color.Primary" DisableElevation="true" Href="/" />

</MudAppBar>*@
@code {
    StateAccessService? _state;
    private string _style = "background-color:#ffffff;color:#594ae2ff";
    Member? _currentMember;

    protected override async Task OnInitializedAsync()
    {
        state.OnStateChange += StateHasChanged;
        _state = state;

        if (_state is not null && _state.Member is not null && _state.Member.IsAdmin == true)
        {
            _style = "display:none;";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (_state is not null)
            {
                _currentMember = _state.Member;
            }
        }
    }

    
    void IDisposable.Dispose()
    {
        _state = null;
    }
}

