@attribute [Authorize]
@inject StateAccessService state
@implements IDisposable;

@if (_state is not null)
{
    if (_state.Member is not null)
    {
        <MudAppBar Bottom="true" Fixed="true" Elevation="0" Dense="true" Color="Color.Primary">

            <MudText>@_state.Member.FirstName  @_state.Member.LastName</MudText>
            <MudSpacer />

            <MudText Style="@_style">Admin</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Logout" Href="/.auth/logout" DisableElevation="true" Size="Size.Large"></MudButton>
        </MudAppBar>
    }
}

@code {
    StateAccessService? _state;
    string _style = String.Empty;
    Member? _currentMember;

    protected override async Task OnInitializedAsync()
    {
        state.OnStateChange += StateHasChanged;
        _state = state;

        if (_state is not null && _state.Member is not null && _state.Member.IsAdmin == true)
        {
            _style = "display:none;";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (_state is not null)
            {
                _currentMember = _state.Member;
                //StateHasChanged();
            }
        }
    }

    protected void AdminVisible()
    {
        //if (_state is not null && _state.Member is not null && _state.Member.IsAdmin == true)
        //{
        //    _style = "display:none;";
        //}
    }

    void IDisposable.Dispose()
    {
        _state = null;
    }
}

